/////////////////////////////////////////////////////////////////////////////////////////////////////
// Options :

//#define NO_SCANLINES
#define signalResolutionX 256.0
#define signalResolutionY 240.0

/////////////////////////////////////////////////////////////////////////////////////////////////////


#define pi        3.14159265358
#define GAUSS(x,w) ((sqrt(2.0) / (w)) * (exp((-2.0 * pi * (x) * (x)) / ((w) * (w)))))
#define a(x) abs(x)
#define d(x,b) (pi*b*min(a(x)+0.5,1.0/b))
#define e(x,b) (pi*b*min(max(a(x)-0.5,-1.0/b),1.0/b))
#define STU(x,b) ((d(x,b)+sin(d(x,b))-e(x,b)-sin(e(x,b)))/(2.0*pi))
#define GETC (tex2D(tex, vTexcoord - pos/texture_size).rgb)

#ifdef NO_SCANLINES
#define VAL (c*STU(pos.x,(signalResolutionX/video_size.x))*STU(pos.y,(signalResolutionY/video_size.y)))
#else
#define VAL (c*STU(pos.x,(signalResolutionX/video_size.x))*GAUSS(pos.y,(signalResolutionY/video_size.y)))
#endif

#define PROCESS(i,j) pos=offset-float2(i,j);c=GETC;tempColor+=VAL;

struct input
{
    float2 video_size;
    float2 texture_size;
    float2 output_size;
    float frame_count;
    float frame_direction;
    float frame_rotation;
};

float4 main(
	float2 vTexcoord : TEXCOORD0,
	uniform input IN, 
	uniform sampler2D tex): COLOR
{
   float2 offset   = frac((vTexcoord.xy * texture_size.xy) - float2(0.5, 0.5));
   float3 tempColor = float3(0.0);
   float2 pos;
   float3   c;

#if 1
   float i,j;
   for(i = -1.0; i < 3.0; i++)
      for(j = -1.0; j < 3.0; j++)
         {
            pos=offset-float2(i,j);
            c=GETC;
            tempColor+=VAL;
         }
#else
   PROCESS(-1.0, -1.0);PROCESS(-1.0,  0.0);PROCESS(-1.0,  1.0);PROCESS(-1.0,  2.0);
   PROCESS( 0.0, -1.0);PROCESS( 0.0,  0.0);PROCESS( 0.0,  1.0);PROCESS( 0.0,  2.0);
   PROCESS( 1.0, -1.0);PROCESS( 1.0,  0.0);PROCESS( 1.0,  1.0);PROCESS( 1.0,  2.0);
   PROCESS( 2.0, -1.0);PROCESS( 2.0,  0.0);PROCESS( 2.0,  1.0);PROCESS( 2.0,  2.0);
#endif
//   tempColor=clamp(tempColor,0.0,1.0);

   return float4(tempColor,1.0);
}
